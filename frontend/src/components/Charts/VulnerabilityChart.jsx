import React, { useEffect, useRef } from 'react';
import Chart from 'chart.js/auto';

const VulnerabilityChart = ({ data }) => {
  const chartRef = useRef(null);
  const chartInstance = useRef(null);

  useEffect(() => {
    // Clean up previous chart instance
    if (chartInstance.current) {
      chartInstance.current.destroy();
    }

    if (!data || data.length === 0) return;

    // Prepare the data for the chart
    const vulnerabilityTypes = data.map(item => item.type);
    const vulnerabilityCounts = data.map(item => item.count);
    const severityColors = data.map(item => {
      switch (item.severity) {
        case 'critical':
          return 'rgba(255, 56, 96, 0.8)';
        case 'high':
          return 'rgba(255, 99, 71, 0.8)';
        case 'medium':
          return 'rgba(255, 221, 87, 0.8)';
        case 'low':
          return 'rgba(35, 209, 96, 0.8)';
        default:
          return 'rgba(0, 170, 255, 0.8)';
      }
    });

    // Get the context from the canvas element
    const ctx = chartRef.current.getContext('2d');
    
    // Create gradient for bar backgrounds
    const gradients = vulnerabilityTypes.map((_, index) => {
      const gradient = ctx.createLinearGradient(0, 0, 0, 400);
      const baseColor = severityColors[index];
      gradient.addColorStop(0, baseColor);
      gradient.addColorStop(1, 'rgba(20, 24, 36, 0.5)');
      return gradient;
    });

    // Create the chart
    chartInstance.current = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: vulnerabilityTypes,
        datasets: [{
          label: 'Number of Vulnerabilities',
          data: vulnerabilityCounts,
          backgroundColor: gradients,
          borderColor: severityColors,
          borderWidth: 1,
          borderRadius: 4,
          maxBarThickness: 35
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            mode: 'index',
            intersect: false,
            backgroundColor: 'rgba(20, 24, 36, 0.9)',
            titleColor: '#00ffaa',
            bodyColor: '#ffffff',
            borderColor: 'rgba(0, 255, 170, 0.2)',
            borderWidth: 1,
            padding: 12,
            titleFont: {
              family: "'Rajdhani', sans-serif",
              size: 14,
              weight: 'bold'
            },
            bodyFont: {
              family: "'Rajdhani', sans-serif",
              size: 13
            },
            callbacks: {
              label: function(context) {
                const item = data[context.dataIndex];
                return [
                  `Count: ${context.raw}`,
                  `Severity: ${item.severity.toUpperCase()}`,
                  `Success Rate: ${item.successRate}%`
                ];
              }
            }
          }
        },
        scales: {
          x: {
            ticks: {
              color: 'rgba(160, 160, 160, 0.8)',
              font: {
                family: "'Share Tech Mono', monospace",
                size: 11
              }
            },
            grid: {
              display: false
            }
          },
          y: {
            beginAtZero: true,
            ticks: {
              color: 'rgba(160, 160, 160, 0.8)',
              font: {
                family: "'Share Tech Mono', monospace",
                size: 11
              }
            },
            grid: {
              color: 'rgba(0, 255, 170, 0.05)'
            }
          }
        },
        animation: {
          duration: 2000,
          easing: 'easeOutQuart'
        }
      }
    });

    return () => {
      if (chartInstance.current) {
        chartInstance.current.destroy();
      }
    };
  }, [data]);

  return (
    <div className="chart-container" style={{ position: 'relative', height: '400px', width: '100%' }}>
      <canvas ref={chartRef}></canvas>
    </div>
  );
};

export default VulnerabilityChart;
